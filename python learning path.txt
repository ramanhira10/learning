Syntax and Basics

    The python shell, basic arithmetics
    control structures
    accepting user input, string and typecasting
    looping in python: for and while
    exception handling
    functions, modules and imports

OOPs concetps and built-in data structures
    Object oriented programming in python
    Lists and List functions
    Regular Expressions
    List comprehensions
    List slicing
    String formatting
    Lambdas
    List, Dictionaries and Tuples

Frameworks
    Django
    Flask

Desktop applications
    Tkinter
    PyQT
    Kivy

Data analysis
    Numpty
    Pandas

Machine Learning
    TensorFlow
    Scikit-Learning
    PyTorch

Build Projects
    Simple Interest/EMI Calculator
    Weather applications
    E-commerce application



from flask import Flask, jsonify, request

app = Flask (__name__)

stores =[{
    'name': 'beautiful store',
    'items': [{
        'name': 'flowers',
        'price': 100
    }]
}, {
    'name': 'beautiful store 2',
    'items': [{
        'name': 'books',
        'price': 100
    }]
}]

@app.route('/store/<string:name>')
def ge_store(name):
    for store in stores:
        if(store['name'] == name):
            return jsonify(store['name'])
    return jsonify({
        'message': 'Store not found'
    })

@app.route('/store/<string:name>/item')
def ge_store_items(name):
    for store in stores:
        if(store['name'] == name):
            return jsonify(store['items'])
    return jsonify({
        'message': 'Store not found'
    })

@app.route('/store', methods=['POST'])
def create_store():
    req_data = request.get_json()
    new_store = {
        'name': req_data['name'],
        'items': []
    }
    stores.append(new_store)
    return jsonify(new_store)

@app.route('/store/<string:name>/item', methods=['POST'])
def create_store_item(name):
    for store in stores:
        if(store['name'] == name):
            req_data = request.get_json()
            new_item = {
                'name': req_data['name'],
                'price': req_data['price']
            }
            store['items'].append(new_item)
            return jsonify(new_item)
    return jsonify({
        'message': 'Store not found'
    })

@app.route('/')
def home():
    return 'hey'

app.run(port=7070, host='0.0.0.0')